
; assumes scancode set 1 (XT)
keyboard_handle_irq:
    push eax
    push edx

    ; read byte from keyboard controller    
    xor eax, eax
    in al, PS2_DATA
    mov edx, eax

    test eax, 0x80 ; bit 7 is press/release flag
    setnz byte [.is_released]

    and eax, 0x7f ; mask out press/release flag

    cmp byte [.pause_break], 1
    je .pause_break_byte_1

    cmp byte [.pause_break], 2
    je .pause_break_byte_2

    cmp byte [.is_extended], 1
    je .read_extended_scancode

    cmp edx, 0xe1
    je .set_pause_break

    cmp edx, 0xe0
    je .set_extended

    mov edx, standard_scancode_map
    mov al, [edx + eax]
    jmp .use_keycode

.set_extended:
    mov byte [.is_extended], 1
    jmp .end

.read_extended_scancode:
    cmp eax, 0x2a
    je .set_prtsc

    cmp eax, 0x37
    je .prtsc_byte_2

    mov edx, extended_scancode_map
    mov al, [edx + eax]
    jmp .use_keycode

.set_prtsc:
    mov al, [.is_released]
    xor al, 1
    mov byte [.is_prtsc_pressed], al
    mov byte [.is_extended], 0
    jmp .end

.prtsc_byte_2:
    mov edx, K_PRSC
    mov eax, 0xff
    cmp byte [.is_prtsc_pressed], 1
    cmove eax, edx
    jmp .use_keycode

.set_pause_break:
    mov byte [.pause_break], 1
    jmp .end

.pause_break_byte_1:
    cmp eax, 0x1d
    je .inc_pause_break
    
    mov al, 0xff
    jmp .use_keycode

.inc_pause_break:
    inc byte [.pause_break]
    jmp .end

.pause_break_byte_2:
    mov edx, K_PAUS
    cmp eax, 0x45
    mov eax, 0xff
    cmove eax, edx

.use_keycode:
    mov dl, [.is_released]
    xor dl, 1
    call keyboard_handle_key

    ; make sure not to clear `is_prtsc_pressed`!
    ; releasing the prtsc key relies on it keeping its value.
    mov word [.is_extended], 0
    mov byte [.pause_break], 0

.end:
    pop edx
    pop eax
    ret

.is_extended      db 0
.is_released      db 0
.pause_break      db 0
.is_prtsc_pressed db 0


; handle a keycode
; * al: keycode
; * dl: is pressed (0 = released)
keyboard_handle_key:
    cmp al, K_RTSH
    je .toggle_rshift
    cmp al, K_LFSH
    je .toggle_lshift

    cmp dl, 0
    je .end

    cmp [.is_rshift], 1
    je .set_shifted_map
    cmp [.is_lshift], 1
    je .set_shifted_map

    mov edx, unshifted_keycode_map
    jmp .index_map

.set_shifted_map:
    mov edx, shifted_keycode_map

.index_map:
    mov al, [edx + eax]
    cmp al, 0
    jz .end

    call print_char

.end:
    ret

.toggle_rshift:
    mov [.is_rshift], dl
    jmp .end

.toggle_lshift:
    mov [.is_lshift], dl
    jmp .end

.is_rshift db 0
.is_lshift db 0



; PS/2 scancode set 1 -> OS keycodes
standard_scancode_map:
    ;    _0      _1      _2      _3      _4      _5      _6      _7
    db 0xff,   K_ESC,  K_AE01, K_AE02, K_AE03, K_AE04, K_AE05, K_AE06 ; 0_
    db K_AE07, K_AE08, K_AE09, K_AE10, K_AE11, K_AE12, K_BKSP, K_TAB  ; 08
    db K_AD01, K_AD02, K_AD03, K_AD04, K_AD05, K_AD06, K_AD07, K_AD08 ; 1_
    db K_AD09, K_AD10, K_AD11, K_AD12, K_RTRN, K_LCTL, K_AC01, K_AC02 ; 18
    db K_AC03, K_AC04, K_AC05, K_AC06, K_AC07, K_AC08, K_AC09, K_AC10 ; 2_
    db K_AC11, K_AE00, K_LFSH, K_AC12, K_AB01, K_AB02, K_AB03, K_AB04 ; 28
    db K_AB05, K_AB06, K_AB07, K_AB08, K_AB09, K_AB10, K_RTSH, K_KPMU ; 3_
    db K_LALT, K_SPCE, K_CAPS, K_FK01, K_FK02, K_FK03, K_FK04, K_FK05 ; 38
    db K_FK06, K_FK07, K_FK08, K_FK09, K_FK10, K_NMLK, K_SCLK, K_KP7  ; 4_
    db K_KP8,  K_KP9,  K_KPSU, K_KP4,  K_KP5,  K_KP6,  K_KPAD, K_KP1  ; 48
    db K_KP2,  K_KP3,  K_KP0,  K_KPDL, 0xff,   0xff,   K_AB00, K_FK11 ; 5_
    db K_FK12, 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 58
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 6_
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 68
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 7_
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 78

extended_scancode_map:
    ;    _0      _1      _2      _3      _4      _5      _6      _7
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 0_
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 08
    db K_PREV, 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 1_
    db 0xff,   K_NEXT, 0xff,   0xff,   K_KPEN, K_RCTL, 0xff,   0xff   ; 18
    db K_MUTE, K_CALC, K_PLAY, 0xff,   K_STOP, 0xff,   0xff,   0xff   ; 2_
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   K_VOLD, 0xff   ; 28
    db K_VOLU, 0xff,   K_WHME, 0xff,   0xff,   K_KPDV, 0xff,   0xff   ; 3_
    db K_RALT, 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 38
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   K_HOME ; 4_
    db K_UP,   K_PGUP, 0xff,   K_LEFT, 0xff,   K_RGHT, 0xff,   K_END  ; 48
    db K_DOWN, K_PGDN, K_INS,  K_DELE, 0xff,   0xff,   0xff,   0xff   ; 5_
    db 0xff,   0xff,   0xff,   K_LWIN, K_RWIN, K_MENU, K_POWR, K_SLEP ; 58
    db 0xff,   0xff,   0xff,   K_WAKE, 0xff,   K_WSRC, K_WFAV, K_WREF ; 6_
    db K_WSTP, K_WFWD, K_WBCK, K_MYPC, K_EMAI, K_MDIA, 0xff,   0xff   ; 68
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 7_
    db 0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff,   0xff   ; 78


; OS keycodes -> cp437 characters
unshifted_keycode_map:
    ;    _0    _1    _2    _3    _4    _5    _6    _7    _8    _9    _a    _b    _c    _d    _e    _f
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 0_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 1_
    db 0x60, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x2d, 0x3d, 0x08, 0x00, 0x00 ; 2_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 3_
    db 0x09, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x75, 0x69, 0x6f, 0x70, 0x5b, 0x5d, 0x0a, 0x00, 0x00 ; 4_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 5_
    db 0x00, 0x61, 0x73, 0x64, 0x66, 0x67, 0x68, 0x6a, 0x6b, 0x6c, 0x3b, 0x27, 0x23, 0x00, 0x00, 0x00 ; 6_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 7_
    db 0x00, 0x5c, 0x7a, 0x78, 0x63, 0x76, 0x62, 0x6e, 0x6d, 0x2c, 0x2e, 0x2f, 0x00, 0x00, 0x00, 0x00 ; 8_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 9_
    db 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; a_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; b_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; c_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; d_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; e_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; f_

shifted_keycode_map:
    ;    _0    _1    _2    _3    _4    _5    _6    _7    _8    _9    _a    _b    _c    _d    _e    _f
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 0_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 1_
    db 0xaa, 0x21, 0x22, 0x9c, 0x24, 0x25, 0x5e, 0x26, 0x2a, 0x28, 0x29, 0x5f, 0x2b, 0x08, 0x00, 0x00 ; 2_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 3_
    db 0x09, 0x51, 0x57, 0x45, 0x52, 0x54, 0x59, 0x55, 0x49, 0x4f, 0x50, 0x7b, 0x7d, 0x0a, 0x00, 0x00 ; 4_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 5_
    db 0x00, 0x41, 0x53, 0x44, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4c, 0x3a, 0x40, 0x7e, 0x00, 0x00, 0x00 ; 6_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 7_
    db 0x00, 0x7c, 0x5a, 0x58, 0x43, 0x56, 0x42, 0x4e, 0x4d, 0x3c, 0x3e, 0x3f, 0x00, 0x00, 0x00, 0x00 ; 8_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 9_
    db 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; a_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; b_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; c_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; d_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; e_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; f_

; keycode names
K_ESC  = 0x00 ; escape
K_FK01 = 0x01 ; function key 1
K_FK02 = 0x02 ; function key 2
K_FK03 = 0x03 ; function key 3
K_FK04 = 0x04 ; function key 4
K_FK05 = 0x05 ; function key 5
K_FK06 = 0x06 ; function key 6
K_FK07 = 0x07 ; function key 7
K_FK08 = 0x08 ; function key 8
K_FK09 = 0x09 ; function key 9
K_FK10 = 0x0a ; function key 10
K_FK11 = 0x0b ; function key 11
K_FK12 = 0x0c ; function key 12
K_PRSC = 0x0d ; print screen
K_SCLK = 0x0e ; scroll lock
K_PAUS = 0x0f ; pause break

K_AE00 = 0x20
K_AE01 = 0x21
K_AE02 = 0x22
K_AE03 = 0x23
K_AE04 = 0x24
K_AE05 = 0x25
K_AE06 = 0x26
K_AE07 = 0x27
K_AE08 = 0x28
K_AE09 = 0x29
K_AE10 = 0x2a
K_AE11 = 0x2b
K_AE12 = 0x2c
K_BKSP = 0x2d ; backspace
K_INS  = 0x2e ; insert
K_HOME = 0x2f ; home
K_PGUP = 0x30 ; page up
K_NMLK = 0x31 ; num lock
K_KPDV = 0x32 ; numpad divide
K_KPMU = 0x33 ; numpad multiply
K_KPSU = 0x34 ; numpad subtract

K_TAB  = 0x40 ; tab
K_AD01 = 0x41
K_AD02 = 0x42
K_AD03 = 0x43
K_AD04 = 0x44
K_AD05 = 0x45
K_AD06 = 0x46
K_AD07 = 0x47
K_AD08 = 0x48
K_AD09 = 0x49
K_AD10 = 0x4a
K_AD11 = 0x4b
K_AD12 = 0x4c
K_RTRN = 0x4d ; enter / return
K_DELE = 0x4e ; delete
K_END  = 0x4f ; end
K_PGDN = 0x50 ; page down
K_KP7  = 0x51 ; numpad 7
K_KP8  = 0x52 ; numpad 8
K_KP9  = 0x53 ; numpad 9
K_KPAD = 0x54 ; numpad add

K_CAPS = 0x60 ; caps lock
K_AC01 = 0x61
K_AC02 = 0x62
K_AC03 = 0x63
K_AC04 = 0x64
K_AC05 = 0x65
K_AC06 = 0x66
K_AC07 = 0x67
K_AC08 = 0x68
K_AC09 = 0x69
K_AC10 = 0x6a
K_AC11 = 0x6b
K_AC12 = 0x6c
K_KP4  = 0x6d ; numpad 4
K_KP5  = 0x6e ; numpad 5
K_KP6  = 0x6f ; numpad 6

K_LFSH = 0x80 ; left shift
K_AB00 = 0x81
K_AB01 = 0x82
K_AB02 = 0x83
K_AB03 = 0x84
K_AB04 = 0x85
K_AB05 = 0x86
K_AB06 = 0x87
K_AB07 = 0x88
K_AB08 = 0x89
K_AB09 = 0x8a
K_AB10 = 0x8b
K_RTSH = 0x8c ; right shift
K_UP   = 0x8d ; up arrow
K_KP1  = 0x8e ; numpad 1
K_KP2  = 0x8f ; numpad 2
K_KP3  = 0x90 ; numpad 3
K_KPEN = 0x91 ; numpad enter

K_LCTL = 0xa0 ; left control
K_LWIN = 0xa1 ; left meta
K_LALT = 0xa2 ; left alt
K_SPCE = 0xa3 ; space
K_RALT = 0xa4 ; right alt
K_RWIN = 0xa5 ; right meta
K_MENU = 0xa6 ; menu
K_RCTL = 0xa7 ; right control
K_LEFT = 0xa8 ; left arrow
K_DOWN = 0xa9 ; down arrow
K_RGHT = 0xaa ; right arrow
K_KP0  = 0xab ; numpad 0
K_KPDL = 0xac ; numpad decimal point / delete

K_POWR = 0xc0 ; power
K_SLEP = 0xc1 ; sleep
K_WAKE = 0xc2 ; wake
K_PREV = 0xc3 ; previous track
K_NEXT = 0xc4 ; next track
K_MUTE = 0xc5 ; mute audio
K_PLAY = 0xc6 ; play audio
K_STOP = 0xc7 ; stop audio
K_VOLD = 0xc8 ; volume down
K_VOLU = 0xc9 ; volume up
K_MYPC = 0xca ; my computer
K_EMAI = 0xcb ; email
K_MDIA = 0xcc ; media select
K_CALC = 0xcd ; calculator
K_WHME = 0xce ; WWW home
K_WSRC = 0xcf ; WWW search
K_WFAV = 0xd0 ; WWW favorites
K_WREF = 0xd1 ; WWW refresh
K_WSTP = 0xd2 ; WWW stop
K_WFWD = 0xd3 ; WWW forward
K_WBCK = 0xd4 ; WWW back
