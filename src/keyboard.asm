
; assumes scancode set 1 (XT)
keyboard_handle_irq:
    push eax
    push edx

    ; read byte from keyboard controller    
    xor eax, eax
    in al, PS2_DATA
    mov edx, eax

    test eax, 0x80 ; bit 7 is press/release flag
    setnz byte [.is_released]

    and eax, 0x7f ; mask out press/release flag

    cmp byte [.pause_break], 1
    je .pause_break_byte_1

    cmp byte [.pause_break], 2
    je .pause_break_byte_2

    cmp byte [.is_extended], 1
    je .read_extended_scancode

    cmp edx, 0xe1
    je .set_pause_break

    cmp edx, 0xe0
    je .set_extended

    mov edx, standard_scancode_map
    mov al, [edx + eax]
    jmp .use_keycode

.set_extended:
    mov byte [.is_extended], 1
    jmp .end

.read_extended_scancode:
    cmp eax, 0x2a
    je .set_prtsc

    cmp eax, 0x37
    je .prtsc_byte_2

    mov edx, extended_scancode_map
    mov al, [edx + eax]
    jmp .use_keycode

.set_prtsc:
    mov al, [.is_released]
    xor al, 1
    mov byte [.is_prtsc_pressed], al
    mov byte [.is_extended], 0
    jmp .end

.prtsc_byte_2:
    mov edx, 0x0d
    mov eax, 0xff
    cmp byte [.is_prtsc_pressed], 1
    cmove eax, edx
    jmp .use_keycode

.set_pause_break:
    mov byte [.pause_break], 1
    jmp .end

.pause_break_byte_1:
    cmp eax, 0x1d
    je .inc_pause_break
    
    mov al, 0xff
    jmp .use_keycode

.inc_pause_break:
    inc byte [.pause_break]
    jmp .end

.pause_break_byte_2:
    mov edx, 0x0f
    cmp eax, 0x45
    mov eax, 0xff
    cmove eax, edx

.use_keycode:
    mov dl, [.is_released]
    xor dl, 1
    call keyboard_handle_key

    ; make sure not to clear `is_prtsc_pressed`!
    ; releasing the prtsc key relies on it keeping its value.
    mov word [.is_extended], 0
    mov byte [.pause_break], 0

.end:
    pop edx
    pop eax
    ret

.is_extended      db 0
.is_released      db 0
.pause_break      db 0
.is_prtsc_pressed db 0


; handle a keycode
; * al: keycode
; * dl: is pressed (0 = released)
keyboard_handle_key:
    cmp al, 0x8c
    je .toggle_rshift
    cmp al, 0x80
    je .toggle_lshift

    cmp dl, 0
    je .end

    cmp [.is_rshift], 1
    je .set_shifted_map
    cmp [.is_lshift], 1
    je .set_shifted_map

    mov edx, unshifted_keycode_map
    jmp .index_map

.set_shifted_map:
    mov edx, shifted_keycode_map

.index_map:
    mov al, [edx + eax]
    cmp al, 0
    jz .end

    call print_char

.end:
    ret

.toggle_rshift:
    mov [.is_rshift], dl
    jmp .end

.toggle_lshift:
    mov [.is_lshift], dl
    jmp .end

.is_rshift db 0
.is_lshift db 0


; PS/2 scancode set 1 -> OS keycodes
standard_scancode_map:
    ;    _0    _1    _2    _3    _4    _5    _6    _7    _8    _9    _a    _b    _c    _d    _e    _f
    db 0xff, 0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x40 ; 0_
    db 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0xa0, 0x61, 0x62 ; 1_
    db 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x20, 0x80, 0x6c, 0x82, 0x83, 0x84, 0x85 ; 2_
    db 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x33, 0xa2, 0xa3, 0x60, 0x01, 0x02, 0x03, 0x04, 0x05 ; 3_
    db 0x06, 0x07, 0x08, 0x09, 0x0a, 0x31, 0x0e, 0x51, 0x52, 0x53, 0x34, 0x6d, 0x6e, 0x6f, 0x54, 0x8e ; 4_
    db 0x8f, 0x90, 0xab, 0xac, 0xff, 0xff, 0x81, 0x0b, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ; 5_
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ; 6_
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ; 7_

extended_scancode_map:
    ;    _0    _1    _2    _3    _4    _5    _6    _7    _8    _9    _a    _b    _c    _d    _e    _f
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ; 0_
    db 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc4, 0xff, 0xff, 0x91, 0xa7, 0xff, 0xff ; 1_
    db 0xc5, 0xcd, 0xc6, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0xff ; 2_
    db 0xc9, 0xff, 0xce, 0xff, 0xff, 0x32, 0xff, 0xff, 0xa4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ; 3_
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2f, 0x8d, 0x30, 0xff, 0xa8, 0xff, 0xaa, 0xff, 0x4f ; 4_
    db 0xa9, 0x50, 0x2e, 0x4e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa1, 0xa5, 0xa6, 0xc0, 0xc1 ; 5_
    db 0xff, 0xff, 0xff, 0xc2, 0xff, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xca, 0xcb, 0xcc, 0xff, 0xff ; 6_
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ; 7_


; OS keycodes -> cp437 characters
unshifted_keycode_map:
    ;    _0    _1    _2    _3    _4    _5    _6    _7    _8    _9    _a    _b    _c    _d    _e    _f
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 0_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 1_
    db 0x60, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x2d, 0x3d, 0x08, 0x00, 0x00 ; 2_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 3_
    db 0x09, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x75, 0x69, 0x6f, 0x70, 0x5b, 0x5d, 0x0a, 0x00, 0x00 ; 4_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 5_
    db 0x00, 0x61, 0x73, 0x64, 0x66, 0x67, 0x68, 0x6a, 0x6b, 0x6c, 0x3b, 0x27, 0x23, 0x00, 0x00, 0x00 ; 6_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 7_
    db 0x00, 0x5c, 0x7a, 0x78, 0x63, 0x76, 0x62, 0x6e, 0x6d, 0x2c, 0x2e, 0x2f, 0x00, 0x00, 0x00, 0x00 ; 8_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 9_
    db 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; a_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; b_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; c_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; d_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; e_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; f_

shifted_keycode_map:
    ;    _0    _1    _2    _3    _4    _5    _6    _7    _8    _9    _a    _b    _c    _d    _e    _f
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 0_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 1_
    db 0xaa, 0x21, 0x22, 0x9c, 0x24, 0x25, 0x5e, 0x26, 0x2a, 0x28, 0x29, 0x5f, 0x2b, 0x08, 0x00, 0x00 ; 2_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 3_
    db 0x09, 0x51, 0x57, 0x45, 0x52, 0x54, 0x59, 0x55, 0x49, 0x4f, 0x50, 0x7b, 0x7d, 0x0a, 0x00, 0x00 ; 4_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 5_
    db 0x00, 0x41, 0x53, 0x44, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4c, 0x3a, 0x40, 0x7e, 0x00, 0x00, 0x00 ; 6_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 7_
    db 0x00, 0x7c, 0x5a, 0x58, 0x43, 0x56, 0x42, 0x4e, 0x4d, 0x3c, 0x3e, 0x3f, 0x00, 0x00, 0x00, 0x00 ; 8_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 9_
    db 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; a_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; b_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; c_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; d_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; e_
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; f_
